{"basic_builder": {"appname": "TA-MaaS360", "friendly_name": "TA-MaaS360", "version": "1.0.0", "author": "Stjubit", "description": "IBM MaaS360 Add-on for Splunk", "theme": "#3781b0", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADTklEQVRYR+2Wa0iTURjH/9NlU7wxSxC7KRKIWWillmZlF6G8ZmJkSHT5YBCLIkwzdSpqfRCyVPzSuhCkEE4LIynTNLdMIqQ+NBAhxbREV0ybc5fOWb7mZa/vLkoSPp/G2Xn/53f+5znPeXihYqkBSyh4y0Acp/F/OuTrLcSwcgzKUbXN2WizQwaDAWcj/LB301qkVjX/WyCFUo3h0hRo9QYMjIziaPlLKH6osdFNYDWYVQ6NEYCuvASkSVqh6B1GPykcQq0OghX28F8nhOTkLmzJk8LRjmcxmMVAtef3YUSlwSkCw8R0IGbs3ulIOAv4SCpvsgjKbKDd64UoSYtAaH49Zm/cFBClIEbibU48Lkla0N6nNAuME+j7Ly26i5MQWlgPHl3BRLABMVN59naQXY2Fb9ZjeBLX5ot5geRkd5er5Wj9PDivCBcQ83F0oDfEidsQll/HqscK1DUB+PD0cOHbcVptLhAV0uj1ELo6QaUyXbNsBtKQOvQ+N8EI7Z9TCzeODSwq0LOL0VD0j0D0qMMIlBEdgMNbfRBZ9JTV1UUB8vfzguR4CELEdXNuHE379uw4VHd0o6zx0xywRQGiyT5fYlIKtjnLQMwZLTu0JHKoR63DYNERhBc3oC3zEILIiy6Y9bCRsgTZtTgU1MiRkxKG7aQq83l/X32rk7p7ZBy+7itBtehVpouI7srxrvfb1FW+sD8ABzevwaHS58ax+2cioRrX4tyD9qk5+fHBCCQtSeKtF8Yxq4HUkw/pndRQeK92RXzZH0FT0ZIZA749DzsLn4CtA3qdFYOqhg+o6PwCDzdHaEfHTWqxPh1NV2IwpFQhqbIZZK0FCQ2xWpq+B6vcnRFVYrqaswLRa0vzoW/oJ5IrXy0IEBWREV26P7ZLwdkPUZE35CkQ1XSgUzFgFViQnyduHwtDOOmpuMIsICqi0unxUZxoUa/M9N4BuVK4mHnuZgMxOwvf4IEbJ8Kxo2BuK8vM0dOjyY5FxkMZ2nqGuEyZ8b/FQMzX1elRcHLgI/Zm4wzBOtEBaCZ0SK6wrLlnRKwGMtaUyeYsg7S5tFhdJ3kSLJbCYVohtMgeMtkmIGaxrxqd8aeXg72l68+ZvyBANlNME1gG4nJzyTn0G6FB2LDBJI67AAAAAElFTkSuQmCC", "visible": true, "tab_version": "4.1.1", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "ibm:maas360:device", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "device", "title": "Device", "description": "MaaS360 Device Input", "type": "customized", "parameters": [{"required": true, "name": "maas360_account", "label": "MaaS360 Account", "default_value": "", "placeholder": "", "help_string": "Global account to use for MaaS360 input", "possible_values": [], "type": "global_account", "format_type": "global_account", "value": ""}, {"required": true, "name": "device_status", "label": "Device Status", "default_value": "ALL", "placeholder": "ALL", "help_string": "Filter devices based on their status", "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "Active", "label": "Active"}, {"value": "Inactive", "label": "Inactive"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "ALL"}, {"required": true, "name": "platform", "label": "Platform", "default_value": "ALL", "placeholder": "ALL", "help_string": "Filter devices based on their platform", "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "Windows", "label": "Windows"}, {"value": "Mac", "label": "Mac"}, {"label": "iOS", "value": "iOS"}, {"label": "BlackBerry", "value": "BlackBerry"}, {"label": "Android", "value": "Android"}, {"label": "Windows Mobile", "value": "Windows Mobile"}, {"label": "Symbian", "value": "Symbian"}, {"label": "Windows Phone 7", "value": "Windows Phone 7"}, {"label": "Others", "value": "Others"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "ALL"}, {"required": true, "name": "managed_status", "label": "MaaS360 Managed Status", "default_value": "ALL", "placeholder": "ALL", "help_string": "Filter devices based on their MaaS360 managed status", "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "Inactive", "label": "Inactive"}, {"value": "Activated", "label": "Activated"}, {"label": "Control Removed", "value": "Control Removed"}, {"label": "Pending Control Removed", "value": "Pending Control Removed"}, {"label": "User Removed Control", "value": "User Removed Control"}, {"label": "Not Enrolled", "value": "Not Enrolled"}, {"label": "Enrolled", "value": "Enrolled"}], "type": "dropdownlist", "format_type": "dropdownlist", "value": "ALL"}, {"required": true, "name": "plc_compliance", "label": "Policy Compliance", "default_value": "ALL", "help_string": "Filter devices based on their policy compliance status", "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "OOC", "label": "OOC"}], "type": "radiogroup", "format_type": "radiogroup", "value": "ALL"}, {"required": true, "name": "rule_compliance", "label": "Rule Compliance", "default_value": "ALL", "help_string": "Filter devices based on their rule compliance status", "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "OOC", "label": "OOC"}], "type": "radiogroup", "format_type": "radiogroup", "value": "ALL"}, {"required": true, "name": "app_compliance", "label": "App Compliance", "default_value": "ALL", "help_string": "Filter devices based on their app compliance status", "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "OOC", "label": "OOC"}], "type": "radiogroup", "format_type": "radiogroup", "value": "ALL"}, {"required": true, "name": "pswd_compliance", "label": "Password Compliance", "default_value": "ALL", "help_string": "Filter devices based on their password compliance status", "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "OOC", "label": "OOC"}], "type": "radiogroup", "format_type": "radiogroup", "value": "ALL"}], "data_inputs_options": [{"type": "customized_var", "name": "maas360_account", "title": "MaaS360 Account", "description": "Global account to use for MaaS360 input", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "device_status", "title": "Device Status", "description": "Filter devices based on their status", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "Active", "label": "Active"}, {"value": "Inactive", "label": "Inactive"}], "format_type": "dropdownlist", "default_value": "ALL", "placeholder": "ALL"}, {"type": "customized_var", "name": "platform", "title": "Platform", "description": "Filter devices based on their platform", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "Windows", "label": "Windows"}, {"value": "Mac", "label": "Mac"}, {"label": "iOS", "value": "iOS"}, {"label": "BlackBerry", "value": "BlackBerry"}, {"label": "Android", "value": "Android"}, {"label": "Windows Mobile", "value": "Windows Mobile"}, {"label": "Symbian", "value": "Symbian"}, {"label": "Windows Phone 7", "value": "Windows Phone 7"}, {"label": "Others", "value": "Others"}], "format_type": "dropdownlist", "default_value": "ALL", "placeholder": "ALL"}, {"type": "customized_var", "name": "managed_status", "title": "MaaS360 Managed Status", "description": "Filter devices based on their MaaS360 managed status", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "Inactive", "label": "Inactive"}, {"value": "Activated", "label": "Activated"}, {"label": "Control Removed", "value": "Control Removed"}, {"label": "Pending Control Removed", "value": "Pending Control Removed"}, {"label": "User Removed Control", "value": "User Removed Control"}, {"label": "Not Enrolled", "value": "Not Enrolled"}, {"label": "Enrolled", "value": "Enrolled"}], "format_type": "dropdownlist", "default_value": "ALL", "placeholder": "ALL"}, {"type": "customized_var", "name": "plc_compliance", "title": "Policy Compliance", "description": "Filter devices based on their policy compliance status", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "OOC", "label": "OOC"}], "format_type": "radiogroup", "default_value": "ALL"}, {"type": "customized_var", "name": "rule_compliance", "title": "Rule Compliance", "description": "Filter devices based on their rule compliance status", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "OOC", "label": "OOC"}], "format_type": "radiogroup", "default_value": "ALL"}, {"type": "customized_var", "name": "app_compliance", "title": "App Compliance", "description": "Filter devices based on their app compliance status", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "OOC", "label": "OOC"}], "format_type": "radiogroup", "default_value": "ALL"}, {"type": "customized_var", "name": "pswd_compliance", "title": "Password Compliance", "description": "Filter devices based on their password compliance status", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "ALL", "label": "ALL"}, {"value": "OOC", "label": "OOC"}], "format_type": "radiogroup", "default_value": "ALL"}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # maas360_account = definition.parameters.get('maas360_account', None)\n    # device_status = definition.parameters.get('device_status', None)\n    # platform = definition.parameters.get('platform', None)\n    # managed_status = definition.parameters.get('managed_status', None)\n    # plc_compliance = definition.parameters.get('plc_compliance', None)\n    # rule_compliance = definition.parameters.get('rule_compliance', None)\n    # app_compliance = definition.parameters.get('app_compliance', None)\n    # pswd_compliance = definition.parameters.get('pswd_compliance', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_maas360_account = helper.get_arg('maas360_account')\n    opt_device_status = helper.get_arg('device_status')\n    opt_platform = helper.get_arg('platform')\n    opt_managed_status = helper.get_arg('managed_status')\n    opt_plc_compliance = helper.get_arg('plc_compliance')\n    opt_rule_compliance = helper.get_arg('rule_compliance')\n    opt_app_compliance = helper.get_arg('app_compliance')\n    opt_pswd_compliance = helper.get_arg('pswd_compliance')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_maas360_account = helper.get_arg('maas360_account', stanza_name)\n    opt_device_status = helper.get_arg('device_status', stanza_name)\n    opt_platform = helper.get_arg('platform', stanza_name)\n    opt_managed_status = helper.get_arg('managed_status', stanza_name)\n    opt_plc_compliance = helper.get_arg('plc_compliance', stanza_name)\n    opt_rule_compliance = helper.get_arg('rule_compliance', stanza_name)\n    opt_app_compliance = helper.get_arg('app_compliance', stanza_name)\n    opt_pswd_compliance = helper.get_arg('pswd_compliance', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_userdefined_global_var = helper.get_global_setting(\"userdefined_global_var\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "customized_options": [{"name": "maas360_account", "value": ""}, {"name": "device_status", "value": "ALL"}, {"name": "platform", "value": "ALL"}, {"name": "managed_status", "value": "ALL"}, {"name": "plc_compliance", "value": "ALL"}, {"name": "rule_compliance", "value": "ALL"}, {"name": "app_compliance", "value": "ALL"}, {"name": "pswd_compliance", "value": "ALL"}], "uuid": "96da9817c4524e65a403d4cc4822fbfd"}, {"index": "default", "sourcetype": "ibm:maas360:compliance", "interval": "1800", "use_external_validation": true, "streaming_mode_xml": true, "name": "compliance_events", "title": "Compliance Events", "description": "MaaS360 Compliance Events Input", "type": "customized", "parameters": [{"required": true, "name": "maas360_account", "label": "MaaS360 Account", "default_value": "", "placeholder": "", "help_string": "Global account to use for MaaS360 input", "possible_values": [], "type": "global_account", "format_type": "global_account", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "maas360_account", "title": "MaaS360 Account", "description": "Global account to use for MaaS360 input", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # maas360_account = definition.parameters.get('maas360_account', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_maas360_account = helper.get_arg('maas360_account')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_maas360_account = helper.get_arg('maas360_account', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_userdefined_global_var = helper.get_global_setting(\"userdefined_global_var\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "customized_options": [{"name": "maas360_account", "value": ""}], "uuid": "710667fb8eab4df495d7d88735233d50"}]}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": []}}, "sourcetype_builder": {"ibm:maas360:device": {"metadata": {"event_count": 0, "data_input_name": "device", "extractions_count": 0, "cims_count": 0}}, "ibm:maas360:compliance": {"metadata": {"event_count": 0, "data_input_name": "compliance_events", "extractions_count": 0, "cims_count": 0}}}}